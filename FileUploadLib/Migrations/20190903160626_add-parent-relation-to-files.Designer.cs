// <auto-generated />
using System;
using FileUploadLib.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FileUploadLib.Migrations
{
    [DbContext(typeof(FileLibContext))]
    [Migration("20190903160626_add-parent-relation-to-files")]
    partial class addparentrelationtofiles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FileUploadLib.Data.Application", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("EditedBy")
                        .HasMaxLength(128);

                    b.Property<DateTime>("EditedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("RootPath")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("ApplicationId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("FileUploadLib.Data.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("EditedBy")
                        .HasMaxLength(128);

                    b.Property<DateTime>("EditedDate");

                    b.Property<Guid>("Guid");

                    b.Property<bool>("IsTestFile");

                    b.Property<string>("NormalizedOriginalFileName")
                        .IsRequired();

                    b.Property<string>("OriginalFileName")
                        .IsRequired();

                    b.Property<int?>("ParentFileId");

                    b.Property<string>("Path")
                        .IsRequired();

                    b.Property<int?>("ScaleWidth");

                    b.HasKey("FileId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ParentFileId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("FileUploadLib.Data.FileOption", b =>
                {
                    b.Property<int>("FileOptionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deletable");

                    b.Property<bool>("Deleted");

                    b.Property<bool>("Downloadable");

                    b.Property<bool>("Editable");

                    b.Property<string>("EditedBy")
                        .HasMaxLength(128);

                    b.Property<DateTime>("EditedDate");

                    b.Property<int>("FileId");

                    b.Property<bool>("IsGaleryImage");

                    b.Property<bool>("Published");

                    b.HasKey("FileOptionId");

                    b.HasIndex("FileId");

                    b.ToTable("FileOptions");
                });

            modelBuilder.Entity("FileUploadLib.Data.FileToModule", b =>
                {
                    b.Property<int>("FileToModuleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltText");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<int?>("DetailId");

                    b.Property<string>("EditedBy")
                        .HasMaxLength(128);

                    b.Property<DateTime>("EditedDate");

                    b.Property<int>("FileId");

                    b.Property<bool>("IsTestFile");

                    b.Property<int>("ModuleId");

                    b.Property<int?>("Sort");

                    b.Property<string>("Title");

                    b.HasKey("FileToModuleId");

                    b.HasIndex("FileId");

                    b.HasIndex("ModuleId");

                    b.ToTable("FileToModules");
                });

            modelBuilder.Entity("FileUploadLib.Data.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ApplicationId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("EditedBy")
                        .HasMaxLength(128);

                    b.Property<DateTime>("EditedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("ModuleId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("FileUploadLib.Data.File", b =>
                {
                    b.HasOne("FileUploadLib.Data.Application", "Application")
                        .WithMany("Files")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FileUploadLib.Data.File", "FileParent")
                        .WithMany("Files")
                        .HasForeignKey("ParentFileId");
                });

            modelBuilder.Entity("FileUploadLib.Data.FileOption", b =>
                {
                    b.HasOne("FileUploadLib.Data.File", "File")
                        .WithMany("FileOptions")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FileUploadLib.Data.FileToModule", b =>
                {
                    b.HasOne("FileUploadLib.Data.File", "File")
                        .WithMany("FileToModules")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FileUploadLib.Data.Module", "Module")
                        .WithMany("FileToModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FileUploadLib.Data.Module", b =>
                {
                    b.HasOne("FileUploadLib.Data.Application", "Application")
                        .WithMany("Modules")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
